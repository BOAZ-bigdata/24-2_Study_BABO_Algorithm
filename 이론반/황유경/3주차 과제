#백준 1260
# 노드,엣지,시작노드 초기화
n, M, v = map(int, input().split())

#n,n 인접행렬 연결상태
m = [[0] * (n+1) for i in range(n+1)]

#방문 여부
visited = [0] * (n+1)

#무방향 그래프 그리기
for i in range(M):
    a, b = map(int, input().split())
    m[a][b] = m[b][a] = 1

#dfs
def dfs(v):
  #노드 방문 시작
  #현재 노드 방문처리
    visited[v] = 1
    print(v, end=' ')

    
    for i in range(1, n+1):
      #방문하지 않고 인접한 노드가 있다면
        if visited[i] == 0 and m[v][i] ==1:
          #재귀->방문
            dfs(i)

def bfs(v):
    #방문해야할 곳을 순서대로 넣을 큐
    queue = [v]

    #dfs를 완료한 visited배열(1로 되어있음)에서 0으로 방문 체크
    visited[v] = 0

    while queue:
      #현재 노드를 큐에서 꺼내서 출력
        v = queue.pop(0)
        print(v, end=' ')
        #인접한 노드 중 방문하지 않은 노드방문하면
        for i in range(1, n+1):
            if visited[i] == 1 and m[v][i] == 1:
              #큐에 추가
                queue.append(i)
                #방문 처리
                visited[i] = 0

dfs(v)
print()
bfs(v)

#백준 11724
## bfs
import sys
from collections import deque

# 입력처리
input = sys.stdin.readline


def bfs(start):
  # 시작 노드를 큐에 추가
    queue = deque([start])
    visited[start] = True
    # 큐가 비어있지 않은 동안 반복
    while queue:
      # 큐에서 노드를 꺼냄
        node = queue.popleft()
        for i in graph[node]:
          # 현재 노드와 연결된 모든 노드 탐색
          # 만약 인접 노드가 방문되지 않았다면
            if not visited[i]:
               # 인접 노드를 방문 처리
                visited[i] = True
                # 인접 노드를 큐에 추가
                queue.append(i)

# 노드수, 엣짓수 정의
N, M = map(int, input().split())
#노드 연결상태 정의
graph = [[] for _ in range(N + 1)]

for _ in range(M):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

# 방문처리 초기화
visited = [False] * (1 + N)
count = 0  

# 1~N번 노드를 각각돌면서
for i in range(1, N + 1):
    if not visited[i]:  # 만약 방문하지 않았다면
        if not graph[i]:  # 만약 그래프가 비어있다면
            count += 1  # 개수 1개 추가
            visited[i] = True  # 방문 처리
        else:  # 만약 그래프가 연결된 점이 있다면
            bfs(i)  # 해당 i를 시작노드로 bfs를 돈다.
            count += 1  # 연결요소 를 +1개 해준다.

print(count)

#백준 1743 -> 오답
from collections import deque
# 입력_행,열,쓰레기수
n, m, k = map(int, input().split())
#배열 초기화
arr = [[0]*m for _ in range(n)]

# 쓰레기가 위치한 좌표 받음
#쓰레기수만큼 반복
for _ in range(k):
    a, b = map(int, input().split())
    arr[a-1][b-1] = 1

#이동 방향 정의
direct = [(1, 0), (-1, 0), (0, 1), (0, -1)]
#방문처리 초기화_방문전
visit = [[0]*m for _ in range(n)]
#
ans = 0

#좌표를 순회하면서
for r in range(n):
    for c in range(m):
      # 셀에 1이 있고 아직 방문전이라면
        if arr[r][c] and not visit[r][c]:
          #시작점
            Q = deque([(r, c)])
            #영역크기 초기화
            cnt = 0
            visit[r][c] = 1
            #큐에서 노드 꺼내기
            while Q:
                nr, nc = Q.popleft()
                #노드 방문 체크
                cnt += 1
                # 
                for d in direct:
                  #새로운 좌표
                    sr, sc = nr+d[0], nc+d[1]
                    #새 좌표가 유효한 위치에 있고 
                    #아직 방문 전이라면
                    if 0 <= sr < n and 0 <= sc < m and not visit[sr][sc] and arr[sr][sc]:
                      #방문처리
                        visit[sr][sc] = 1
                        #큐에 저장
                        Q.append((sr, sc))
            #최대 크기 업데이트
            ans = max(ans, cnt)

print(ans)
