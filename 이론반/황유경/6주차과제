# 백준 14284
# 한 지점에서 지점까지 최단경로_ 다익스트라 알고리즘
from heapq import heappop, heappush
import sys

# 노드, 간선 수 받아오기
input = sys.stdin.readline
node, edge = map(int, input().split())

# 각 노드의 인접리스트 초기화
edges = [[] for _ in range(node+1)]

# 간선을 순회하며
for _ in range(edge):
  # a,b노드 사이의 가중치 c 입력받음
    a, b, c = map(int, input().split())
    # a -> b 가중치 c
    edges[a].append((b, c))
    # b -> a 가중치 c
    edges[b].append((a, c))

# 시작, 종료노드 지정
s, t = map(int, input().split())
 
# 다익스트라 알고리즘
# 각 노드에 대해 무한대로 거리 초기화
dist = [int(1e9)] * (node+1)
# 시작 노드 지정
dist[s] = 0
# 큐 초기화(현재까지의 거리, 현재 노드)
q = [(0, s)]

# 큐가 빌때까지 반복
while q:
    # 현재 큐에서 가장 거리가 짧은 노드 pop
    d, now = heappop(q)
    # 현재 노드에서 갈 수 있는 인접 노드, 가중치 순회
    for nx, nd in edges[now]:
      # 만약 현재까지의 거리 d에 인접 노드로 가는 비용을 더한 값< 기존의 노드까지의 거리보다 작으면,
        if d+nd < dist[nx]:
          # 해당 노드까지의 최단 거리를 업데이트
            dist[nx] = d+nd
            # 큐에 새로운 경로를 추가
            heappush(q, (d+nd, nx))
print(dist[t])

## 백준 14938 
import sys, heapq

# 다익스트라 알고리즘
# 시작노드에서 다른 노드를 순회하며 아이템 수집
def dijkstra(start):
    global result
    INF = int(1e9)
    # 우선순위큐 초기화
    q = []
    heapq.heappush(q, [0, start])
    # 시작노드 거리 0 지정
    distance[start] = 0
    # 시작노드에서 수집할 수 있는 아이템 개수를 초기화
    count = items[start]
    # 큐가 빌때까지
    while q:
      # 큐에서 가장 짦은 거리를 가진 노드 pop
        dist, now = heapq.heappop(q)
        # 현재 노드까지 최단거리< 큐에서 가장 짦은 거리라면
        if distance[now] < dist:
          # 다른 노드 탐색
            continue
        # 현재 노드의 인접노드를 순회하며
        for x in graph[now]:
          # 인접노드까지 총 비용 계산
            cost = x[1] + dist
            # 기존거리>새로 계산한 비용 이라면, 수색범위 이내에 있다면
            if distance[x[0]] > cost and cost <= m:
              #새로운 경로를 찾은것 -> 큐에 저장
                heapq.heappush(q, [cost, x[0]])
                # 처음 방문하는 노드라면
                if distance[x[0]] == INF:
                  # 아이템 모음
                    count += items[x[0]]
                    # 최단거리 갱신
                distance[x[0]] = cost
    # 수집한 아이템의 최댓값 갱신
    result = max(result, count)
            

input = sys.stdin.readline

# 지역수, 수색범위, 간선 수 입력받기
n, m, r = map(int, input().split())
# 각 지역에서 수집할 수 있는 아이템 개수를 리스트로 입력받음
items = [0] + list(map(int, input().split()))
# 그래프 생성
graph = [[] for _ in range(n+1)]
for _ in range(r):
  # 노드 사이의 거리가 l인 
    a, b, l = map(int, input().split())
    #양방향 간선 생성
    graph[a].append([b, l])
    graph[b].append([a, l])

INF = int(1e9)
result = 0
for i in range(1, n+1):
    distance = [INF for _ in range(n+1)]
    dijkstra(i)
print(result)
