## 1931

# 회의 갯수 입력
n = int(input())

meetings = []

# 공백기준으로 split
for _ in range(n):
    start, end = map(int, input().split(" "))
    # 회의 시작, 종료시점 리스트 저장 
    meetings.append([start, end])

# 회의 시작하는 시간 정렬 
meetings = sorted(meetings, key=lambda a: a[0]) 
# 회의 끝나는 시간 정렬 
meetings = sorted(meetings, key=lambda a: a[1])
 
end_meeting = 0 # 회의의 끝나는 시간
conut = 0 # 회의 개수_정답
 
for new_start, new_end in meetings:
  if new_start >= end_meeting: # 새 회의 시작시간이 이전 회의 종료 시간보다 크거나 같을경우
    conut += 1
    end_meeting = new_end
 
print(conut)

## 11501
# 주가를 거꾸로 정렬
# 최대 주가와의 차익 합계를 구해야함

# 테스트케이스 갯수 입력
T = int(input())

# 테스트케이스만큼 반복하면서
for _ in range(T):
  # 몇일동안의 주가를 입력받을건지 
    num_days = int(input())
    # 공백기준으로 주가 입력받아 리스트로
    stock = list(map(int, input().split()))
    # 리스트 역으로 정렬
    stock.reverse()
    # 최대 주가 초기화_역으로 정렬한 리스트의 첫번째 원소를 최대 주가로 정의
    max = stock[0]
    sum = 0

  # 역으로 정렬한 주가 리스트를 순회하며
    for i in range(1, num_days):
      # 최대주가보다 높은 주가라면
      # 즉, 주가가 떨여진다면
        if max < stock[i]:
          # 최대주가 갱신
            max = stock[i]
            # 주식을 사지 않고 지나감
            continue
        # 최대주가 이하의 주가라면
        #즉, 주가가 오른다면
        # 최대 주가와 해당 주가의 차익을 본다
        # 합계 누적
        sum += max - stock[i]

    print(sum) 

## 백준 1912
## 10 -4 3 1 5 6 -35 12 21 -1

# 몇개의 수를 입력받을지
n = int(input())
# 공백기준으로 split해서 숫자 배열 정의
nums = list( map(int, input().split(' ')))
 
# 숫자 배열을 순회하면서
for i in range(1, n):
  # 현재 인덱스를 누적합할 것인지 판단
  # 현재 인덱스 값보다 현재 인덱스+이전 인덱스 값이 크다면
  # 현재 인덱스 값->현재 인덱스+이전 인덱스 값으로 변경
  # 즉, 누적합으로 변경
    nums[i] = max(nums[i], nums[i] + nums[i-1])
#누적합 중 가장 큰 값이 정답
print(max(m))
